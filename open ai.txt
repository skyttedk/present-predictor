OBJECT Codeunit 70204 Fortea OpenAI Classify
{
  OBJECT-PROPERTIES
  {
    Date=05/26/25;
    Time=[ 9:45:24 PM];
    Modified=Yes;
    Version List=FORTEA;
  }
  PROPERTIES
  {
    OnRun=VAR
            ResponseObject@1120104000 : Codeunit 50004;
          BEGIN
          END;

  }
  CODE
  {
    VAR
      TOKEN@1000000000 : TextConst 'ENU=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';
      JsonObjectType@1000000001 : 'Object,Array';
      ASSISTANT@1000000002 : TextConst 'ENU=asst_BuFvA6iXF4xSyQ4px7Q5zjiN';
      Progress@1000000003 : Dialog;
      ThreadId@1120104000 : Text;

    PROCEDURE ProductClassify@1000000009(ProductDescription@1120104000 : Text;VAR ResponseObject@1120104001 : Codeunit 50004);
    VAR
      MessageId@1000000001 : Text;
      RunId@1000000002 : Text;
      RunStatus@1000000003 : Text;
      Count@1000000004 : Integer;
      ItemCategory@1120104002 : Text;
    BEGIN

      Progress.OPEN('##1####');


      MessageId := AddMessage(ThreadId,ProductDescription);
      RunId := Run(ThreadId);
      Count := 1;

      REPEAT
        Progress.UPDATE(1,STRSUBSTNO('Getting Run Status %1',Count));
        RunStatus := GetRunStatus(ThreadId,RunId);
        SLEEP(1000);
        Count +=1;
      UNTIL (RunStatus = 'completed') OR
            (RunStatus = 'failed') OR
            (RunStatus = 'cancelled') OR
            (RunStatus = 'expired');

      GetThreadMessageObject(ThreadId,ResponseObject);

      Progress.CLOSE();
    END;

    PROCEDURE CreateThread@1000000002() : Text;
    VAR
      RequestObject@1000000001 : Codeunit 50004;
      ResponseObject@1000000002 : Codeunit 50004;
    BEGIN
      RequestObject.Initialize(JsonObjectType::Object);
      //Progress.UPDATE(1,'Creating Thread');
      Call('POST','https://api.openai.com/v1/threads',RequestObject,ResponseObject);


      ThreadId := ResponseObject.GetStringValue('id');
    END;

    PROCEDURE AddMessage@1000000011(ThreadId@1000000002 : Text;Message@1000000003 : Text) : Text;
    VAR
      RequestObject@1000000001 : Codeunit 50004;
      ResponseObject@1000000000 : Codeunit 50004;
    BEGIN
      RequestObject.Initialize(JsonObjectType::Object);
      RequestObject.AddKeyValue('role','user');
      RequestObject.AddKeyValue('content',Message);
      Progress.UPDATE(1,'Adding Message');
      Call('POST',STRSUBSTNO('https://api.openai.com/v1/threads/%1/messages',ThreadId),RequestObject,ResponseObject);
      EXIT(ResponseObject.GetStringValue('id'));
    END;

    PROCEDURE Run@1000000027(ThreadId@1000000002 : Text) : Text;
    VAR
      RequestObject@1000000001 : Codeunit 50004;
      ResponseObject@1000000000 : Codeunit 50004;
    BEGIN

      RequestObject.Initialize(JsonObjectType::Object);
      RequestObject.AddKeyValue('assistant_id',ASSISTANT);
      Progress.UPDATE(1,'Creating Run');
      Call('POST',STRSUBSTNO('https://api.openai.com/v1/threads/%1/runs',ThreadId),RequestObject,ResponseObject);
      EXIT(ResponseObject.GetStringValue('id'));
    END;

    PROCEDURE GetRunStatus@1000000040(ThreadId@1000000003 : Text;RunId@1000000002 : Text) : Text;
    VAR
      RequestObject@1000000001 : Codeunit 50004;
      ResponseObject@1000000000 : Codeunit 50004;
    BEGIN
      RequestObject.Initialize(JsonObjectType::Object);
      Call('GET',STRSUBSTNO('https://api.openai.com/v1/threads/%1/runs/%2',ThreadId,RunId),RequestObject,ResponseObject);
      EXIT(ResponseObject.GetStringValue('status'));
    END;

    PROCEDURE GetThreadMessageObject@1000000061(ThreadId@1000000002 : Text;VAR Object@1120104004 : Codeunit 50004);
    VAR
      RequestObject@1000000001 : Codeunit 50004;
      ResponseObject@1000000000 : Codeunit 50004;
      JsonContent@1000000004 : Codeunit 50004;
      JsonData@1000000005 : Codeunit 50004;
      JsonArrayObject@1000000003 : Codeunit 50004;
      JsonTextObject@1120104000 : Codeunit 50004;
      JsonTextInner@1120104001 : Codeunit 50004;
      ValueString@1120104002 : Text;
      InnerObject@1120104003 : Codeunit 50004;
    BEGIN
      RequestObject.Initialize(JsonObjectType::Object);
      Progress.UPDATE(1,'Getting Messages');
      Call('GET',STRSUBSTNO('https://api.openai.com/v1/threads/%1/messages',ThreadId),RequestObject,ResponseObject);

      ResponseObject.GetArray('data',JsonData);
      JsonData.GetArrayObject(0,JsonArrayObject);
      JsonArrayObject.GetArray('content',JsonContent);

      // Get the text object from content[0]
      JsonContent.GetArrayObject(0,JsonTextObject);
      JsonTextObject.GetObject('text',JsonTextObject);
      ValueString := JsonTextObject.GetStringValue('value');

      //Parse inner object
      Object.Initialize(JsonObjectType::Object);
      Object.FromString(ValueString);
    END;

    PROCEDURE Call@1000000001(Method@1000000010 : Text;URL@1000000007 : Text;RequestObject@1000000009 : Codeunit 50004;ResponseObject@1000000008 : Codeunit 50004);
    VAR
      HttpWebRequest@1000000000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      HttpWebResponse@1000000001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      Encoding@1000000002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      StreamReader@1000000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader";
      StreamWriter@1000000004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamWriter";
      RequestStream@1000000005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      ResponseStream@1000000006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      ResponseText@1000000011 : Text;
    BEGIN

      // Create the HTTP request
      HttpWebRequest := HttpWebRequest.Create(URL);
      HttpWebRequest.Method := Method;
      HttpWebRequest.ContentType := 'application/json';

      // Set additional headers if needed
      HttpWebRequest.Headers.Add('Authorization', 'Bearer ' + TOKEN);
      HttpWebRequest.Headers.Add('OpenAI-Beta', 'assistants=v2');

      IF (Method = 'POST') OR (Method = 'PUT') OR (Method = 'PATCH') THEN
        IF RequestObject.ToString() <> '' THEN BEGIN
          //Get the request stream and write the body
          RequestStream := HttpWebRequest.GetRequestStream();
          StreamWriter := StreamWriter.StreamWriter(RequestStream, Encoding.UTF8);
          StreamWriter.Write(RequestObject.ToString());
          StreamWriter.Close();
          RequestStream.Close();
        END;

      // Get the response
      HttpWebResponse := HttpWebRequest.GetResponse();

      IF HttpWebResponse.StatusDescription = 'OK' THEN BEGIN
        ResponseStream := HttpWebResponse.GetResponseStream();
        StreamReader := StreamReader.StreamReader(ResponseStream);
        ResponseText := StreamReader.ReadToEnd();

        ResponseObject.FromString(ResponseText);
        StreamReader.Close();
        ResponseStream.Close();
        HttpWebResponse.Close();
      END ELSE
        ERROR(HttpWebResponse.StatusDescription);

    END;

    LOCAL PROCEDURE ClearJsonText@1120104001(JsonText@1120104001 : Text) : Text;
    VAR
      CleanedText@1120104000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      C9@1120104002 : Text;
      C10@1120104003 : Text;
      C13@1120104004 : Text;
    BEGIN
      CleanedText := JsonText;

      C9[1] := 9;
      C10[1] := 10;
      C13[1] := 13;

      CleanedText := CleanedText.Replace('\"', '"');
      CleanedText := CleanedText.Replace('\n', '');
      CleanedText := CleanedText.Replace('\r', '');
      CleanedText := CleanedText.Replace('\t', '');
      CleanedText := CleanedText.Replace('\\n', '');    // Escaped newlines
      CleanedText := CleanedText.Replace('\\r', '');    // Escaped carriage returns
      CleanedText := CleanedText.Replace('\\t', '');    // Escaped tabs
      CleanedText := CleanedText.Replace(C10, ''); // Line feed
      CleanedText := CleanedText.Replace(C13, ''); // Carriage return
      CleanedText := CleanedText.Replace(C9, '');  // Tab

      CleanedText := CleanedText.Trim();

      // Remove surrounding quotes if present
      IF CleanedText.StartsWith('"') AND CleanedText.EndsWith('"') THEN
          CleanedText := CleanedText.Substring(2, CleanedText.Length - 2);

      EXIT(CleanedText.ToString());
    END;

    LOCAL PROCEDURE DumpJsonResponse@1120104011(Value@1120104000 : Text);
    VAR
      StreamReader@1120104001 : InStream;
      StreamWriter@1120104003 : OutStream;
      TempBlob@1120104002 : Record 99008535;
      X@1120104004 : Text;
    BEGIN

      TempBlob.Blob.CREATEOUTSTREAM(StreamWriter);
      StreamWriter.WRITETEXT(Value);
      TempBlob.Blob.CREATEINSTREAM(StreamReader);

      X := 'response.txt';

      DOWNLOADFROMSTREAM(StreamReader,'REsponse','','',X);
    END;

    BEGIN
    END.
  }
}

